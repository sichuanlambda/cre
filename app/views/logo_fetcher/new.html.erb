<style>
  .logo-fetcher-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #f6f8ff 0%, #ffffff 100%);
    padding: 2rem;
  }

  .card {
    background: white;
    border-radius: 20px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
    max-width: 600px;
    margin: 0 auto;
    padding: 2rem;
    transition: all 0.3s ease;
  }

  .card:hover {
    transform: translateY(-2px);
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.12);
  }

  .title {
    font-size: 2.5rem;
    background: linear-gradient(120deg, #4f46e5, #7c3aed);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin-bottom: 1.5rem;
  }

  .input-group {
    position: relative;
    margin-bottom: 1.5rem;
  }

  .input-field {
    width: 100%;
    padding: 1rem;
    padding-left: 2.5rem;
    border: 2px solid #e5e7eb;
    border-radius: 12px;
    font-size: 1rem;
    transition: all 0.3s ease;
  }

  .input-field:focus {
    border-color: #4f46e5;
    box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
    outline: none;
  }

  .input-icon {
    position: absolute;
    left: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    color: #6b7280;
  }

  .fetch-button {
    width: 100%;
    padding: 1rem;
    background: linear-gradient(120deg, #4f46e5, #7c3aed);
    color: white;
    border: none;
    border-radius: 12px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .fetch-button:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(79, 70, 229, 0.2);
  }

  .loading-animation {
    padding: 1rem;
    background: #f9fafb;
    border-radius: 12px;
    margin-top: 1rem;
  }

  .result-container {
    margin-top: 1.5rem;
    padding: 1.5rem;
    border-radius: 12px;
    background: #f9fafb;
    border: 2px solid #e5e7eb;
  }

  .logo-image {
    width: 100%;
    height: auto;
    border-radius: 8px;
    margin: 1rem 0;
  }

  .copy-button {
    padding: 0.5rem 1rem;
    background: #4f46e5;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .copy-button:hover {
    background: #4338ca;
  }

  .success-message {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    padding: 1rem 2rem;
    background: #10b981;
    color: white;
    border-radius: 8px;
    animation: slideIn 0.3s ease;
  }

  @keyframes slideIn {
    from { transform: translateY(100%); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
  }

  .textarea-field {
    width: 100%;
    min-height: 150px;
    padding: 1rem;
    border: 2px solid #e5e7eb;
    border-radius: 12px;
    font-size: 1rem;
    font-family: monospace;
    transition: all 0.3s ease;
    margin-bottom: 1rem;
  }

  .textarea-field:focus {
    border-color: #4f46e5;
    box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
    outline: none;
  }

  .mode-switch {
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .mode-button {
    padding: 0.5rem 1rem;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    background: white;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .mode-button.active {
    background: #4f46e5;
    color: white;
    border-color: #4f46e5;
  }

  .processing-status {
    margin-top: 1.5rem;
    padding: 1rem;
    border-radius: 8px;
    background: #f3f4f6;
  }

  .progress-bar {
    width: 100%;
    height: 8px;
    background: #e5e7eb;
    border-radius: 4px;
    overflow: hidden;
    margin-top: 0.5rem;
  }

  .progress-bar-fill {
    height: 100%;
    background: linear-gradient(120deg, #4f46e5, #7c3aed);
    transition: width 0.3s ease;
  }
</style>

<div class="logo-fetcher-container">
  <div class="card">
    <h1 class="title">Logo Fetcher</h1>
    
    <div class="input-group">
      <textarea 
        id="bulk_urls" 
        class="textarea-field" 
        placeholder="Paste URLs here, one per line..."
        rows="10"
      ></textarea>
    </div>

    <button id="fetchLogoBtn" class="submit-button" onclick="processBulkUrls()">
      Process URLs
    </button>

    <div id="bulkStatus" class="processing-status" style="display: none;">
      <p>Processing URLs... <span id="progressCount">0/0</span></p>
      <div class="progress-bar">
        <div id="progressBar" class="progress-bar-fill" style="width: 0%"></div>
      </div>
    </div>

    <a id="downloadLink" 
       style="display: none;" 
       class="download-button">
      Download Results CSV
    </a>
  </div>
</div>

<script>
async function processBulkUrls() {
  const urls = document.getElementById('bulk_urls').value
    .split('\n')
    .map(url => url.trim())
    .filter(url => url.length > 0);

  if (urls.length === 0) {
    alert('Please enter at least one URL');
    return;
  }

  const statusDiv = document.getElementById('bulkStatus');
  const progressBar = document.getElementById('progressBar');
  const progressCount = document.getElementById('progressCount');
  const downloadLink = document.getElementById('downloadLink');
  statusDiv.style.display = 'block';
  downloadLink.style.display = 'none';

  try {
    const response = await fetch('/logo_fetcher/bulk_process', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ urls: urls })
    });

    const { job_id } = await response.json();
    let pollInterval;

    // Poll for job status
    pollInterval = setInterval(async () => {
      const statusResponse = await fetch(`/logo_fetcher/job_status/${job_id}`);
      const status = await statusResponse.json();
      
      if (status.total > 0) {
        const percentage = (status.processed / status.total) * 100;
        progressBar.style.width = `${percentage}%`;
        progressCount.textContent = `${status.processed}/${status.total} URLs processed`;
      }

      if (status.completed && status.csv_url) {
        clearInterval(pollInterval);
        downloadLink.href = status.csv_url;
        downloadLink.style.display = 'block';
        progressCount.textContent = 'Processing complete!';
      }
    }, 1000);

  } catch (error) {
    console.error('Error:', error);
    progressCount.textContent = 'Error processing URLs';
  }
}
</script> 